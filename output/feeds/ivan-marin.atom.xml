<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Another Life Form</title><link href="http://mfactor.sdf.org/" rel="alternate"></link><link href="http://mfactor.sdf.org/feeds/ivan-marin.atom.xml" rel="self"></link><id>http://mfactor.sdf.org/</id><updated>2015-11-23T21:57:00-02:00</updated><entry><title>Desktop Files on Debian/Ubuntu and XDG</title><link href="http://mfactor.sdf.org/desktop-files.html" rel="alternate"></link><updated>2015-11-23T21:57:00-02:00</updated><author><name>Ivan Marin</name></author><id>tag:mfactor.sdf.org,2015-11-23:desktop-files.html</id><summary type="html">&lt;p&gt;I've been struggling for a while now with custom launchers. First, a bit of organizatoin on how the launchers are supposed to work.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;desktop file&lt;/code&gt; is a file that describes a launcher for an application. This file will be indexed by a Window Manager, like KDE or XFCE and can be shown on the menus and etc. The &lt;a href="http://standards.freedesktop.org/desktop-entry-spec/latest/apa.html"&gt;standard form&lt;/a&gt; of a desktop file is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1.0&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Application&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Foo Viewer&lt;/span&gt;
&lt;span class="na"&gt;Comment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;The best viewer for Foo objects available!&lt;/span&gt;
&lt;span class="na"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;fooview %F&lt;/span&gt;
&lt;span class="na"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;fooview&lt;/span&gt;
&lt;span class="na"&gt;Actions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Gallery;Create;&lt;/span&gt;
&lt;span class="na"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Network&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This file should be put on a standard path in the system, like &lt;code&gt;~/.local/share/applications&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;And how to check if the file you wrote is valid? Just run &lt;code&gt;desktop-file-validate&lt;/code&gt; and it will point any errors that you have. &lt;/p&gt;
&lt;h2&gt;KDE blunder&lt;/h2&gt;
&lt;p&gt;After figuring it out how was the correct format for the file, my menus on KDE (and all actions, like changing the default application)was not changing anything. After searching for a long time, I found a solution: the context menu in Dolphin, to change the default application, was poiting to &lt;code&gt;.local/share/applications/mineapps.list&lt;/code&gt; and KDE 5 was reading the file on &lt;code&gt;.config/mimeapps.list&lt;/code&gt;. The solution? Exporting the default directory where KDE can find its icons. On my system, I changed .zshenv and added&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;XDG_DATA_DIRS=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;XDG_DATA_DIRS&lt;/span&gt;&lt;span class="x"&gt;:/home/ispmarin/.local/share/applications&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;done!&lt;/p&gt;</summary><category term="linux"></category><category term="desktop"></category></entry><entry><title>How to learn Physics (and Mathematics) with History</title><link href="http://mfactor.sdf.org/physics-and-history.html" rel="alternate"></link><updated>2015-08-19T19:30:00-03:00</updated><author><name>Ivan Marin</name></author><id>tag:mfactor.sdf.org,2015-08-19:physics-and-history.html</id><summary type="html">&lt;p&gt;Watching the new Cosmos series about Faraday I was struck by a very simple thought: seeing how things evolved made simpler for me to understand physical concepts. I don’t know if I had that epiphany before or if that’s common, but for me it was a revelation. Very simple things, like magnetic fields, were way more clear after showing what Faraday was trying to achieve and was thinking than any Electromagnetism A that I did as an undergrad. And I believe that this might help my new endeavor: understanding probability deeply.&lt;/p&gt;
&lt;p&gt;I’ve been reading Lady Luck, by Warren Weaver, and I’m loving it. It has a very unique balance between telling the history of probability with showing the basic concepts in a very clear way. Another fantastic thing about this book is that it doesn’t save on words: Warren repeats and repeats what it is and what is not, so it’s perfectly clear on every moment what he’s talking about. That’s uncommon for a math book: usually the authors assume that everyone knows what he means and that a beginner easily can understand everything that is going on when a formula or a concept is demonstrated. The terror of physicists – “it can be easily demonstrated” is avoided at all costs. The trade off is that sometimes verbosity can be a little tiresome, but for me it has a clarity that I wished all my undergrad textbooks had. And that’s the connection between the Cosmos episode and this book: both show the concepts from a basic point of view, but they excel in going deep in the subject without being condescending or jumping “obvious” steps, showing the history behind that idea and how it came to be.&lt;/p&gt;
&lt;p&gt;At least on my first years as a Physics undergrad, all students were eager to experiment, to go hands on the physics labs or the observatory. Two things were hammered down on us, one good and one bad. The good one was that we had to have method: just poking things randomly would not take us very far, as fun as it was. Teaching this method (called, despite all controversy, the scientific method) was one of the best things that I could have learned as an undergrad. The bad thing was that we were buried in math courses without any kind of context. On the first year alone we had an ordinary and partial differential equations course, a analytical geometry course, two calculus courses and a basic programming course, plus some optional advanced physics math courses. I know that this is common on physics courses, but those were just dumped on us. Some physics teachers tried to give us context, but it was more on the ping-pong version (“this you will see on your calculus course”, “this you will see on your physics course” and so on) and not very helpful. This demotivated me and several other students. Why did we need to learn all this calculus and geometry without any tangible reason? (The “you’re going to need this to understand that” is not very helpful, at all. You don’t know that yet!). Only after my first classical mechanics course things started to make more sense, and got better with a great electromagnetism teacher that showed how things were put together by Maxwell and Faraday.&lt;/p&gt;
&lt;p&gt;Maybe this is about the “math first”or “physics first” dilemma for a Physics course. If you already know the math you can concentrate on the Physics ideas and results. If you know the physics principles before, the math is the best support for those ideas to flourish and be useful. (On an aside, I don’t agree with a teacher that I had that said “all you need is the physical intuition, the math is the easy part! Follow your intuition!” and every time we needed the math, he would fail.) I can see both sides now and would propose a third option: teach the history first. With the context things would be easier on both sides, the ideas would permeate the ideas on both sides and maybe provide more support for thought and understanding. This maybe would prevent the effect of trusting only on the math, without reflecting what the math is telling you. As another great teacher said, “What is a sign? It’s the difference of sending the astronaut to the moon or killing him!”&lt;/p&gt;</summary><category term="physics"></category><category term="mathematics"></category><category term="history"></category><category term="learning"></category></entry><entry><title>Finally, Python 3!</title><link href="http://mfactor.sdf.org/finally-python-3.html" rel="alternate"></link><updated>2015-06-27T09:39:00-03:00</updated><author><name>Ivan Marin</name></author><id>tag:mfactor.sdf.org,2015-06-27:finally-python-3.html</id><summary type="html">&lt;p&gt;It's 2015 and it's the first time that I'm using Python 3
professionally. And I have to admit, if I knew that all my scripts were
going to work so easily with 3, I would have changed way before. There
were a few hurdles with the Python 3 version of some libraries - patsy,
I'm looking at you - but so far the transition was painless. The things
that I had to change were expected, like the print function and some
dict operations, and xrange. I know it's for the best now, so let's
roll.&lt;/p&gt;
&lt;p&gt;First of all, I switched from WinPython to Anaconda. Having to work on a
constrained Windows installation, Anaconda provides better support for
installing packages than pip alone. And as so far using virtualenv has
not been a success on Windows, I'm going to try the conda environment
for my projects.&lt;/p&gt;
&lt;p&gt;On the version control front, I finally got access to a git shell on
Windows, and now I can keep my sanity working with code. There's even a
Team Foundation Server plugin for it, and the client is not that bad -
actually, it's useful and keeps the git terminology, helping immensely
someone that was used to git on the command line. Not bad, Microsoft.
Git-cola is still better and is several times smaller than TFS, but hey,
sometimes we have to use what we got. So my working environment now is&lt;/p&gt;
&lt;p&gt;* Anaconda 2.2.0, Python 3 version&lt;/p&gt;
&lt;p&gt;* Packages:&lt;/p&gt;
&lt;p&gt;-pandas, sklearn, matplotlib, calendar, sqlalchemy with Oracle plugin,
seaborn (mostly for styles), statsmodels.&lt;/p&gt;
&lt;p&gt;* Editor:&lt;/p&gt;
&lt;p&gt;Vim and ipython notebook (depending on the type of work)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://msysgit.github.io/"&gt;Git for Windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and Tableau for some visualizations.&lt;/p&gt;
</summary></entry></feed>